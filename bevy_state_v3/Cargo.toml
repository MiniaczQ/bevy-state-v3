[package]
name = "bevy_state_v3"
version = "0.15.0-dev"
edition = "2021"
description = "Finite state machines for Bevy"
homepage = "https://bevyengine.org"
repository = "https://github.com/bevyengine/bevy"
license = "MIT OR Apache-2.0"
keywords = ["bevy"]

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[features]
default = ["bevy_reflect", "bevy_app", "bevy_hierarchy"]
bevy_reflect = ["dep:bevy_reflect", "bevy_ecs/bevy_reflect"]
bevy_app = ["dep:bevy_app"]
bevy_hierarchy = ["dep:bevy_hierarchy"]
serialize = ["serde"]

[dependencies]
bevy_ecs = { git = "https://github.com/bevyengine/bevy" }
bevy_derive = { git = "https://github.com/bevyengine/bevy" }
bevy_state_macros = { path = "macros", version = "0.15.0-dev" }
bevy_utils = { git = "https://github.com/bevyengine/bevy" }
bevy_reflect = { git = "https://github.com/bevyengine/bevy", optional = true }
bevy_app = { git = "https://github.com/bevyengine/bevy", optional = true }
bevy_hierarchy = { git = "https://github.com/bevyengine/bevy", optional = true }
serde = { version = "1.0", features = ["derive"], optional = true }
disqualified = "1.0"

[lints]
workspace = true

[package.metadata.docs.rs]
rustdoc-args = ["-Zunstable-options"]
all-features = true

[dev-dependencies]
bevy = { git = "https://github.com/bevyengine/bevy", default-features = false, features = [
    "animation",
    "bevy_asset",
    "bevy_audio",
    "bevy_color",
    "bevy_gilrs",
    "bevy_scene",
    "bevy_winit",
    "bevy_core_pipeline",
    "bevy_pbr",
    "bevy_picking",
    "bevy_gltf",
    "bevy_render",
    "bevy_sprite",
    "bevy_text",
    "bevy_ui",
    "multi_threaded",
    "png",
    "hdr",
    "vorbis",
    "x11",
    "bevy_gizmos",
    "android_shared_stdcxx",
    "tonemapping_luts",
    "smaa_luts",
    "default_font",
    "webgl2",
    "sysinfo_plugin",
] }

[[example]]
name = "global_state"
path = "examples/global_state.rs"
doc-scrape-examples = true

[package.metadata.example.global_state]
name = "Simple global state"
description = "Simple way of using global state"
category = "State"
wasm = false

[[example]]
name = "local_state"
path = "examples/local_state.rs"
doc-scrape-examples = true

[package.metadata.example.local_state]
name = "Simple local state"
description = "Simple way of using local state"
category = "State"
wasm = false

[[example]]
name = "substate"
path = "examples/substate.rs"
doc-scrape-examples = true

[package.metadata.example.substate]
name = "Substate"
description = "Basic substate usage"
category = "State"
wasm = false

[[example]]
name = "persistent_substate"
path = "examples/persistent_substate.rs"
doc-scrape-examples = true

[package.metadata.example.persistent_substate]
name = "Persistent substate"
description = "Substate that returns to the correct value when reactivated"
category = "State"
wasm = false

[[example]]
name = "state_transitions"
path = "examples/state_transitions.rs"
doc-scrape-examples = true

[package.metadata.example.state_transitions]
name = "State transitions"
description = "Listening to state transitions"
category = "State"
wasm = false

[[example]]
name = "state_scoped_entities"
path = "examples/state_scoped_entities.rs"
doc-scrape-examples = true

[package.metadata.example.state_scoped_entities]
name = "State scoped entities"
description = "Entities that despawn when state changes"
category = "State"
wasm = false

[[example]]
name = "state_stack"
path = "examples/state_stack.rs"
doc-scrape-examples = true

[package.metadata.example.state_stack]
name = "Stack based state"
description = "Custom state which operates on a stack"
category = "State"
wasm = false

[[example]]
name = "behavior_tree"
path = "examples/behavior_tree.rs"
doc-scrape-examples = true

[package.metadata.example.behavior_tree]
name = "Behavior tree"
description = "Behavior tree made using states"
category = "State"
wasm = false
